# 2-rectangle.txt

The ``2-rectangle`` module
==========================

Using ``Rectangle`` class
-------------------------

Testing class with multiple test cases.

	>>> Rectangle = __import__('3-rectangle').Rectangle

Now test:

    >>> my_rectangle = Rectangle()
    >>> print(type(my_rectangle)) # doctest: +ELLIPSIS
    <class '...rectangle.Rectangle'>
    >>> print(my_rectangle.__dict__) # doctest: +ELLIPSIS
    {...'_Rectangle__height': 0...}

    >>> my_rectangle = Rectangle()
    >>> print(my_rectangle.__dict__) # doctest: +ELLIPSIS
    {...'_Rectangle__height': 0...}

    >>> my_rectangle = Rectangle(2, 4)
    >>> print(my_rectangle.__dict__) # doctest: +ELLIPSIS
    {...'_Rectangle__height': 4...}

    >>> my_rectangle.width = 10
    >>> my_rectangle.height = 3
    >>> print(my_rectangle.__dict__) # doctest: +ELLIPSIS
    {...'_Rectangle__height': 3...}

    >>> my_rectangle.width = "9"
    Traceback (most recent call last):
    TypeError: width must be an integer

    >>> my_rectangle.width = -5
    Traceback (most recent call last):
    ValueError: width must be >= 0

    >>> my_rectangle.height = "9"
    Traceback (most recent call last):
    TypeError: height must be an integer

    >>> my_rectangle.height = -5
    Traceback (most recent call last):
    ValueError: height must be >= 0

    >>> my_rectangle = Rectangle(2, 4)
    >>> print("Area: {} - Perimeter: {}".format(my_rectangle.area(), my_rectangle.perimeter()))
    Area: 8 - Perimeter: 12

    >>> my_rectangle.width = 10
    >>> my_rectangle.height = 3
    >>> print("Area: {} - Perimeter: {}".format(my_rectangle.area(), my_rectangle.perimeter()))
    Area: 30 - Perimeter: 26

    >>> my_rectangle = Rectangle()
    >>> my_rectangle.perimeter()
    0

    >>> my_rectangle = Rectangle(height=1)
    >>> my_rectangle.perimeter()
    0

    >>> my_rectangle = Rectangle(width=1)
    >>> my_rectangle.perimeter()
    0

    >>> my_rectangle = Rectangle(2, 4)
    >>> print(str(my_rectangle))
    ##
    ##
    ##
    ##

    >>> print(repr(my_rectangle)) # doctest: +ELLIPSIS
    <...rectangle.Rectangle object at...>

    >>> my_rectangle.width = 10
    >>> my_rectangle.height = 3
    >>> print(my_rectangle)
    ##########
    ##########
    ##########

    >>> my_rectangle = Rectangle()
    >>> print(str(my_rectangle))
    <BLANKLINE>

    >>> my_rectangle = Rectangle(height=1)
    >>> print(str(my_rectangle))
    <BLANKLINE>

    >>> my_rectangle = Rectangle(width=1)
    >>> print(str(my_rectangle))
    <BLANKLINE>
